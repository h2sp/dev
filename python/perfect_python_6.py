## クラス
### 6-1 クラスの定義
"""
クラスの定義はclass文で行う
"""

class spam:
    pass

"""
class文でクラス名を指定し、「:」の後ろに一段落インデントして、クラスの定義を続ける
関数定義と同様に、クラス定義の先頭にもドキュメンテーション文字列を記述できる
空のクラスは、クラス定義にpassだけを指定します
クラスは呼び出し可能なオブジェクトで、呼び出すとそのクラスのインスタンスを返す
"""

spam = spam()
print(spam)

"""
インスタンスには、以下の形式で自由に属性を設定できる

インスタンス.属性名 = 値
"""

"""
属性が不要となった場合は、

del インスタンス.属性名

で削除する
"""

### 6-2 クラスオブジェクト
"""
pythonでは、関数は数値や文字列と同様な普通のオブジェクトですが、
クラスも同様になにも特別なことのない、単なるオブジェクトの一種です
"""
#ham = spam   #spamオブジェクトをhamに代入
#SPAM = ham() #spamクラスのインスタンスが生成される

"""
クラスをリストに格納して直接インスタンスを生成しても問題ない
"""
#classes = [spam]    #spamオブジェクトをリストに格納
#SPAM = classes[0]() #spam呼び出し

"""
どんな書き方であれ、クラスオブジェクトに()演算子を適用して呼び出せば、値として新しいインスタンスが返ってくる
また、クラスにはインスタンスと同様に属性を設定できる
"""

class spam:
    ham = 100

"""
このように定義すれば、hamはspamクラスの属性値となり
print(spam.ham)のように参照できる
クラス属性は、インスタンスからもselfを通じて参照できる
"""

class spam:
    ham = 200
    def print(self):
        print(self.ham)

### 6-3 メソッド
"""
クラスのメンバとして定義された関数をメソッドといい、関数と同じようにdef文で定義します
メソッドは最低でも1つの引数を持ち、この最初の引数は必ずselfという名前にするという慣例になっていて、
メソッドを呼び出した時クラスのインスタンスが渡されます
メソッドから自分自身の属性を参照したり、他のメソッドを呼び出したりする場合は、self.attrのように、selfを使って参照する
"""

class spma:
    def ham(self):
        self.egg("メソッドの呼び出し")

    def egg(self, msg):
        print(msg)

spam = spma()
spam.egg("テスト")

### 6-4 コンストラクタ
"""
インスタンスの作成時、クラスに__init__という名前のメソッドがあれば、自動的に呼び出される
通常、__init__メソッドには、インスタンスの初期化処理を記述する
__init__の引数には、インスタンス生成でクラスを呼び出した時の引数が渡されます
"""

class spam:
    def __init__(self, ham, egg):
        self.ham = ham
        self.egg = egg

spam = spam(5,10)

### 6-5 デストラクタ
"""
インスタンスが不要となり、pythonがそのインスタンスを削除するとき、クラスに__del__という名前の
メソッドがあれば自動的に呼び出される
"""

class spam:
    def __del__(self):
        print("spamが削除されました")

spam = spam()
del spam

### 6-6 インスタンスアロケータ
"""
インスタンス生成時、クラスに__new__という名前のメソッドがあれば、インスタンスを生成するたびに呼び出される
__new__メソッドの第一引数は、インスタンスではなくクラスオブジェクトで、戻り値がクラスのインスタンスなら
そのインスタンスの__init__メソッドが呼び出される
通常のクラスであれば__new__を実装する必要はありませんが、ini型のような更新不能な型から継承されたクラスを
定義した場合、以下のようには書けない
"""

class myint(int):
    def __init__(self, n):
        self.value = n

"""
__init__はインスタンスを生成した後、値を初期化するために呼び出されるメソッドですが、
int型オブジェクトは更新不能なオブジェクトですので、いったん生成されたint型オブジェクトの値を
__init__()で変更することはできないためです
従って、int型の派生クラスを作るには、一旦作ったint型オブジェクトの値を変更するのではなく、
__new__メソッドをオーバーライドして以下のようにすることで、
オブジェクトを生成する際の初期値として値を指定する必要があります
"""

class myint(int):
    def __new__(cls,n):
        return super().__new__(cls,n)
